name: Isolated Smoke Test & Report

on:
  push: {}
  pull_request: {}
  workflow_dispatch: {}

jobs:
  collect-test-files:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Find all smoke test files and build matrix
        id: set-matrix
        run: |
          # 1) Gather all smoke tests under tests/*/smoke/
          readarray -t files < <(find tests -type f -path "*/smoke/test_*.py")

          # 2) Build JSON objects with a round-robin user_index of 1 or 2
          includes=()
          i=0
          for file in "${files[@]}"; do
            flow=$(echo "$file" | awk -F'/' '{print $2}')
            idx=$(( (i % 2) + 1 ))
            includes+=("{\"flow\":\"$flow\",\"test_file\":\"$file\",\"user_index\":$idx}")
            i=$((i + 1))
          done

          # 3) Join with commas and wrap into a valid JSON matrix
          joined=$(printf ",%s" "${includes[@]}")
          array="[${joined:1}]"
          matrix="{\"include\":${array}}"

          echo "matrix=$matrix" >> "$GITHUB_OUTPUT"

  test:
    needs: collect-test-files
    runs-on: ubuntu-latest
    timeout-minutes: 30

    strategy:
      matrix: ${{ fromJson(needs.collect-test-files.outputs.matrix) }}

    # expose your one provider account to both USER_INDEXes
    env:
      HOME_URL_DEV: ${{ secrets.HOME_URL_DEV }}
      BASE_URL: ${{ secrets.BASE_URL }}
      TEST_EMAIL_1: ${{ secrets.TEST_EMAIL_1 }}
      TEST_PASSWORD_1: ${{ secrets.TEST_PASSWORD_1 }}
      TEST_EMAIL_2: ${{ secrets.TEST_EMAIL_1 }}
      TEST_PASSWORD_2: ${{ secrets.TEST_PASSWORD_1 }}


    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name:
          Debug: dump all TEST_* env vars
        run: |
          echo ">>> ALL TEST_* ENV VARS <<<"
          env | grep '^TEST_' || echo "(none)"

      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-json-report python-dotenv pytest-xdist

      - name: Run ${{ matrix.test_file }} (User #${{ matrix.user_index }})
        # Only TEST_USER_INDEX comes from the matrix; the others are job-level env
        env:
          TEST_USER_INDEX: ${{ matrix.user_index }}
        run: |
          echo "=== ENV DUMP BEFORE pytest ==="
          # prove that the four per-user secrets are present
          echo "TEST_USER_INDEX = $TEST_USER_INDEX"
          echo "TEST_EMAIL_1    = $TEST_EMAIL_1"
          echo "TEST_PASSWORD_1 = ${TEST_PASSWORD_1:+(set)}"
          echo "TEST_EMAIL_2    = $TEST_EMAIL_2"
          echo "TEST_PASSWORD_2 = ${TEST_PASSWORD_2:+(set)}"
          echo "Other TEST_*:"
          env | grep '^TEST_'

          echo "=== Running ${{ matrix.test_file }} as user #$TEST_USER_INDEX ==="
          # Map the right indexed secrets into the generic TEST_EMAIL/TEST_PASSWORD
          if [ "$TEST_USER_INDEX" = "1" ]; then
            export TEST_EMAIL="$TEST_EMAIL_1"
            export TEST_PASSWORD="$TEST_PASSWORD_1"
          else
            export TEST_EMAIL="$TEST_EMAIL_2"
            export TEST_PASSWORD="$TEST_PASSWORD_2"
          fi

          pytest -n auto "${{ matrix.test_file }}" -v --json-report

      - name: List screenshots
        if: always()
        run: |
          echo "=== Screenshots directory contents ==="
          ls -la screenshots || echo "(no screenshots)"

      - name: Upload Screenshots
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: screenshots-${{ matrix.flow }}-user${{ matrix.user_index }}
          path: screenshots/
