name: Isolated Smoke Test & Report

on:
  push: {}
  pull_request: {}
  workflow_dispatch: {}

jobs:
  collect-test-files:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}

    steps:
      - uses: actions/checkout@v3

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Find all smoke test files (consumer and provider)
        id: set-matrix
        run: |
          # gather all smoke tests
          mapfile -t files < <(find tests -type f -path "*/smoke/test_*.py")
          includes=()
          i=0
          for file in "${files[@]}"; do
            flow=$(echo "$file" | awk -F'/' '{print $2}')
            # round-robin user index (1 or 2)
            idx=$(( (i % 2) + 1 ))
            includes+=("{\"flow\":\"$flow\",\"test_file\":\"$file\",\"user_index\":$idx}")
            i=$((i + 1))
          done
          matrix="{\"include\":[${includes[*]}]}"
          echo "$matrix"
          echo "matrix=$matrix" >> $GITHUB_OUTPUT

  test:
    needs: collect-test-files
    runs-on: ubuntu-latest

    strategy:
      matrix: ${{ fromJson(needs.collect-test-files.outputs.matrix) }}

    # bring in your HOME_URL_DEV for .env
    env:
      HOME_URL_DEV: ${{ secrets.HOME_URL_DEV }}
      BASE_URL:     ${{ secrets.BASE_URL }}

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-json-report python-dotenv pytest-xdist

      - name: Create .env file
        run: |
          cat <<EOF > .env
          echo "BASE_URL=${{ secrets.BASE_URL }}" > .env
          echo "HOME_URL_DEV=${{ secrets.HOME_URL_DEV }}" >> .env
          echo "TEST_USER_INDEX=${{ matrix.user_index }}" >> .env
          echo "TEST_EMAIL_1=${{ secrets.TEST_EMAIL_1 }}" >> .env
          echo "TEST_PASSWORD_1=${{ secrets.TEST_PASSWORD_1 }}" >> .env
          echo "TEST_EMAIL_2=${{ secrets.TEST_EMAIL_2 }}" >> .env
          echo "TEST_PASSWORD_2=${{ secrets.TEST_PASSWORD_2 }}" >> .env
          EOF
      - name: Dump .env for debug
        run: |
          echo "--- .env contents ---"
          cat .env

      - name: Run ${{ matrix.test_file }} (User #${{ matrix.user_index }})
        run: |
          echo "===================="
          echo "USER_INDEX = $TEST_USER_INDEX"
          echo "TEST_FILE  = ${{ matrix.test_file }}"
          echo "===================="
          pytest -n auto "${{ matrix.test_file }}" -v --json-report

      - name: List screenshots
        run: |
          ls -l screenshots || echo "No screenshots directory found"

      - name: Upload Screenshots
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: screenshots-${{ matrix.flow }}-user${{ matrix.user_index }}
          path: screenshots/

#
#  coverage:
#    name: Coverage & Summary Report
#    needs: test
#    runs-on: ubuntu-latest
#
#    steps:
#      - name: Check out code
#        uses: actions/checkout@v3
#
#      - name: Set up Python
#        uses: actions/setup-python@v4
#        with:
#          python-version: '3.9'
#
#      - name: Install dependencies
#        run: |
#          python -m pip install --upgrade pip
#          pip install -r requirements.txt
#          pip install pytest pytest-json-report python-dotenv coverage
#
#      - name: Create .env file
#        env:
#          BASE_URL:       ${{ secrets.BASE_URL }}
#          TEST_EMAIL:     ${{ secrets.EMAIL }}
#          TEST_PASSWORD:  ${{ secrets.PASSWORD }}
#          HOME_URL_DEV:   ${{ secrets.HOME_URL_DEV }}
#        run: |
#          cat <<EOF > .env
#          BASE_URL=${BASE_URL}
#          TEST_EMAIL=${TEST_EMAIL}
#          TEST_PASSWORD=${TEST_PASSWORD}
#          HOME_URL_DEV=${{ secrets.HOME_URL_DEV }}
#          EOF
#
#      - name: Run full test suite under coverage
#        env:
#          PYTHONPATH: ${{ github.workspace }}
#        run: |
#          set +e
#          coverage run -m pytest \
#            --json-report \
#            --json-report-file=report.json
#          echo "exit_code=$?" >> $GITHUB_OUTPUT
#          set -e
#
#      - name: Produce coverage report
#        run: coverage report --fail-under=80
#
#      - name: Generate HTML coverage report
#        run: coverage html
#
#      - name: Generate JSON & human-readable test report
#        run: python report_generator.py
#
#      - name: Upload coverage & test-report artifacts
#        if: always()
#        uses: actions/upload-artifact@v4
#        with:
#          name: coverage-and-report
#          path: |
#            report.json
#            TEST_REPORT.md
#            TEST_REPORT.pdf
#            htmlcov/
#
#      # Optional: Fail job if coverage tests failed
#      - name: Fail job if tests failed
#        if: steps.run_full_test_suite_under_coverage.outputs.exit_code != '0'
#        run: exit 1
