name: Test & Report

on:
  push: {}
  pull_request: {}
  workflow_dispatch: {}

jobs:
  discover:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        flow: [consumer, provider]
        test_type: [smoke, functional]  # Add more types here

    outputs:
      matrix-${{ matrix.flow }}-${{ matrix.test_type }}: ${{ steps.set-matrix.outputs.matrix }}

    steps:
      - uses: actions/checkout@v3

      - name: Find test files for ${{ matrix.flow }} / ${{ matrix.test_type }}
        id: set-matrix
        run: |
          FILES=$(find tests/${{ matrix.flow }}/${{ matrix.test_type }} -type f -name "test_*.py" | jq -R -s -c 'split("\n")[:-1]')
          echo "matrix=${FILES}" >> $GITHUB_OUTPUT

  run:
    needs: discover
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        flow: [consumer, provider]
        test_type: [smoke, functional]
        include:
          - flow: consumer
            test_type: smoke
            matrix_output: ${{ needs.discover.outputs.matrix-consumer-smoke }}
          - flow: consumer
            test_type: functional
            matrix_output: ${{ needs.discover.outputs.matrix-consumer-functional }}
          - flow: provider
            test_type: smoke
            matrix_output: ${{ needs.discover.outputs.matrix-provider-smoke }}
          - flow: provider
            test_type: functional
            matrix_output: ${{ needs.discover.outputs.matrix-provider-functional }}

    steps:
      - name: Expand matrix from JSON string
        id: expand
        run: |
          echo '${{ matrix.matrix_output }}' > matrix.json
          jq -c '.[]' matrix.json | while read test_file; do
            echo "::append-env name=TEST_FILES::$test_file"
          done

  test-file:
    needs: run
    runs-on: ubuntu-latest
    if: ${{ env.TEST_FILES != '' }}
    strategy:
      fail-fast: false
      matrix:
        test_file: ${{ fromJson(env.TEST_FILES) }}

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-json-report python-dotenv

      - name: Create .env file
        env:
          BASE_URL:       ${{ secrets.BASE_URL }}
          TEST_EMAIL:     ${{ secrets.EMAIL }}
          TEST_PASSWORD:  ${{ secrets.PASSWORD }}
          HOME_URL_DEV:   ${{ secrets.HOME_URL_DEV }}
        run: |
          cat <<EOF > .env
          BASE_URL=${BASE_URL}
          TEST_EMAIL=${TEST_EMAIL}
          TEST_PASSWORD=${TEST_PASSWORD}
          HOME_URL_DEV=${HOME_URL_DEV}
          EOF

      - name: Run pytest for ${{ matrix.test_file }}
        env:
          PYTHONPATH:     ${{ github.workspace }}
          BASE_URL:       ${{ secrets.BASE_URL }}
          TEST_EMAIL:     ${{ secrets.EMAIL }}
          TEST_PASSWORD:  ${{ secrets.PASSWORD }}
          HOME_URL_DEV:   ${{ secrets.HOME_URL_DEV }}
        run: |
          pytest ${{ matrix.test_file }} \
            --json-report \
            --json-report-file=report-${{ matrix.test_file }}.json -q

      - name: Upload JSON report
        uses: actions/upload-artifact@v4
        with:
          name: report-${{ matrix.test_file }}
          path: report-${{ matrix.test_file }}.json

#
#  coverage:
#    name: Coverage & Summary Report
#    needs: test
#    runs-on: ubuntu-latest
#
#    steps:
#      - name: Check out code
#        uses: actions/checkout@v3
#
#      - name: Set up Python
#        uses: actions/setup-python@v4
#        with:
#          python-version: '3.9'
#
#      - name: Install dependencies
#        run: |
#          python -m pip install --upgrade pip
#          pip install -r requirements.txt
#          pip install pytest pytest-json-report python-dotenv coverage
#
#      - name: Create .env file
#        env:
#          BASE_URL:       ${{ secrets.BASE_URL }}
#          TEST_EMAIL:     ${{ secrets.EMAIL }}
#          TEST_PASSWORD:  ${{ secrets.PASSWORD }}
#          HOME_URL_DEV:   ${{ secrets.HOME_URL_DEV }}
#        run: |
#          cat <<EOF > .env
#          BASE_URL=${BASE_URL}
#          TEST_EMAIL=${TEST_EMAIL}
#          TEST_PASSWORD=${TEST_PASSWORD}
#          HOME_URL_DEV=${{ secrets.HOME_URL_DEV }}
#          EOF
#
#      - name: Run full test suite under coverage
#        env:
#          PYTHONPATH: ${{ github.workspace }}
#        run: |
#          set +e
#          coverage run -m pytest \
#            --json-report \
#            --json-report-file=report.json
#          echo "exit_code=$?" >> $GITHUB_OUTPUT
#          set -e
#
#      - name: Produce coverage report
#        run: coverage report --fail-under=80
#
#      - name: Generate HTML coverage report
#        run: coverage html
#
#      - name: Generate JSON & human-readable test report
#        run: python report_generator.py
#
#      - name: Upload coverage & test-report artifacts
#        if: always()
#        uses: actions/upload-artifact@v4
#        with:
#          name: coverage-and-report
#          path: |
#            report.json
#            TEST_REPORT.md
#            TEST_REPORT.pdf
#            htmlcov/
#
#      # Optional: Fail job if coverage tests failed
#      - name: Fail job if tests failed
#        if: steps.run_full_test_suite_under_coverage.outputs.exit_code != '0'
#        run: exit 1
