name: Isolated Smoke Test & Report

on:
  push: {}
  pull_request: {}
  workflow_dispatch: {}

jobs:
  collect-test-files:
    runs-on: ubuntu-latest
    outputs:
      consumer_files: ${{ steps.set-consumer.outputs.files }}
      provider_files: ${{ steps.set-provider.outputs.files }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Find consumer smoke test files
        id: set-consumer
        run: |
          files=$(find tests/consumer/smoke -type f -name "test_*.py" | jq -R -s -c 'split("\n")[:-1]')
          echo "files=$files" >> $GITHUB_OUTPUT

      - name: Find provider smoke test files
        id: set-provider
        run: |
          files=$(find tests/provider/smoke -type f -name "test_*.py" | jq -R -s -c 'split("\n")[:-1]')
          echo "files=$files" >> $GITHUB_OUTPUT

  test:
    needs: collect-test-files
    runs-on: ubuntu-latest

    strategy:
      matrix:
        flow: [consumer, provider]
        test_file: []

    steps:
      - name: Set up test matrix
        id: set-matrix
        run: |
          if [ "${{ matrix.flow }}" = "consumer" ]; then
            files='${{ needs.collect-test-files.outputs.consumer_files }}'
          else
            files='${{ needs.collect-test-files.outputs.provider_files }}'
          fi
          echo "FILES=$files" >> $GITHUB_ENV

      - name: Expand matrix for test files
        id: expand-matrix
        run: |
          echo "${FILES}" | jq -r '.[]' > files.txt
          echo "Found files for ${{ matrix.flow }}:"
          cat files.txt

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-json-report python-dotenv

      - name: Create .env file
        run: |
          echo "BASE_URL=${{ secrets.BASE_URL }}" >> .env
          echo "TEST_EMAIL=${{ secrets.TEST_EMAIL }}" >> .env
          echo "TEST_PASSWORD=${{ secrets.TEST_PASSWORD }}" >> .env
          echo "HOME_URL_DEV=${{ secrets.HOME_URL_DEV }}" >> .env

      - name: Run each test file in isolation
        run: |
          while read file; do
            echo "==================== Running: $file ===================="
            pytest "$file" -v --json-report
          done < files.txt
